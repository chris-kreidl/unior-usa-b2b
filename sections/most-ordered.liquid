{% schema %}
{
  "name": "Most Ordered",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "default": "Most Ordered Items",
      "label": "Title"
    }
  ],
  "presets": [
    {
      "name": "Most Ordered"
    }
  ]
}
{% endschema %}

{% stylesheet %}
{% endstylesheet %}

{% javascript %}
{% endjavascript %}

{{ 'customer.css' | asset_url | stylesheet_tag }}
<style>
  .account table td:first-of-type a {
    box-shadow: unset;
    font-size: unset;
  }
  .customer tbody td {
  }
</style>

<div class="customer account" style="padding: 0px;">
  <div class="product-list-wrapper page-width{% if section.settings.title == blank %} no-heading{% endif %}">
    <div class="title-wrapper-with-link title-wrapper--self-padded-mobile{% if section.settings.title == blank %} title-wrapper-with-link--no-heading{% endif %}">
      <h2 class="product-list-title">{{ section.settings.title | escape }}</h2>
    </div>

    {% if customer.orders.size > 0 %}
      {% liquid
        assign orderlines = ''
        paginate customer.orders by 20
          for order in customer.orders
            paginate order.line_items by 50
              for line in order.line_items
                if line.variant_id > 0
                  assign current_line = line.quantity | append: ':' | append: line.product.handle | append: ':' | append: line.product.title | append: ':' | append: line.product.url
                  assign orderlines = orderlines | append: current_line | append: '|'
                endif
              endfor
            endpaginate
          endfor
        endpaginate
        assign orderlines = orderlines | split: '|'
      %}
      <script>
        const lines = {{ orderlines | json }}.map((x) => x.split(":"));
        let parsed = {};
        lines.forEach((line) => {
         parsed[line[1]] ? parsed[line[1]] += parseInt(line[0]) : parsed[line[1]] = parseInt(line[0]);
        });
        parsed = Object.entries(parsed).sort((a, b) => b[1] - a[1]);

        showItems(parsed.slice(0, 20));

        async function showItems(lines) {
          for await (const line of lines) {
            await fetch(window.Shopify.routes.root + 'products/' + line[0] + '.js')
            .then((resp) => resp.json())
            .then((product) => {
              let table = document.getElementById('topProducts');
              let row = table.insertRow(-1);
              let cellProduct = row.insertCell(0);
              let cellQuantity = row.insertCell(1);
              cellProduct.innerHTML = '<a href="'+ product.url + '">' + product.title + '</a>';
              cellQuantity.innerHTML = line[1];
            });
          };
        }
      </script>

      <table role="table" class="order-history">
        <caption class="visually-hidden">
          Top Products
        </caption>
        <thead role="rowgroup">
          <tr role="row">
            <th id="ColumnProduct" scope="col" role="columnheader">Product</th>
            <th id="ColumnQuantity" scope="col" role="columnheader">Quantity</th>
          </tr>
        </thead>
        <tbody role="rowgroup" id="topProducts"></tbody>
      </table>
    {%- else -%}
      <p>{{ 'customer.orders.none' | t }}</p>
    {%- endif -%}
  </div>
</div>
